{"version":3,"sources":["components/redux/actioncreators.js","components/Word.js","components/Form.js","components/Filter.js","components/List.js","components/redux/store.js","components/redux/reducer/wordReducer.js","components/redux/reducer/sholuldshowformReducer.js","components/redux/reducer/filtermodeReducer.js","App.js","serviceWorker.js","index.js"],"names":["URL","toggleForm","type","set_filter_mode","filterMode","getAllWord","dispatch","axios","get","then","response","words","data","removeWord","_id","delete","word","Error","catch","error","alert","message","toggleWord","isMemorized","put","addWord","en","vn","post","Word","_this","this","props","react_default","a","createElement","className","onClick","Component","connect","actioncreators","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","txtEn","txtVn","bind","assertThisInitialized","setState","_this2","shouldShowForm","placeholder","value","onChange","evt","target","style","width","margin","borderRadius","Filter","List","components_Form","components_Filter","filter","w","map","components_Word","key","reducer","combineReducers","arguments","length","undefined","action","objectSpread","newWords","assign","unshift","store","createStore","applyMiddleware","thunk","App","es","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41cf6c9e.chunk.js","sourcesContent":["// phương thức sẽ tự gọi dispatch cho giá trị trả về\nimport axios from 'axios';\nconst URL = \"https://servernguyenhung.herokuapp.com/word/\";\n\nexport function toggleForm() {\n    return { type: 'TOGGLE_FORM' }\n}\nexport function set_filter_mode(filterMode) {\n    return { type: 'SET_FILTER_MODE', filterMode }\n}\n\nexport function getAllWord() {\n    return function (dispatch) {\n        const URL = \"https://servernguyenhung.herokuapp.com/words/\";\n        axios.get(URL)\n            .then(response => dispatch({ type: 'SET_ALL_WORDS', words: response.data.words }));\n    }\n}\n\nexport function removeWord(_id) {\n    return function (dispatch) {\n        axios.delete(URL + _id)\n            .then(response => {\n                if (!response.data.word) throw new Error(\"Can not remove word\");\n                dispatch({ type: 'REMOVE_WORD', _id: response.data.word._id })\n            })\n            .catch(error => alert(error.message));\n    }\n}\n\nexport function toggleWord(_id, isMemorized) {\n    return function (dispatch) {\n        axios.put(URL + _id, { isMemorized })\n            .then(response => {\n                if (!response.data.word) throw new Error(\"Can not toggle word\");\n                dispatch({ type: 'TOGGLE_WORD', _id: response.data.word._id })\n            })\n            .catch(error => alert(error.message));\n    }\n}\n\n// \nexport function addWord(en, vn) {\n    return function (dispatch) {\n        axios.post(URL, { en, vn })\n            .then(response => {\n                if (!response.data.word) throw new Error(\"Can not add word\");\n                dispatch({ type: 'ADD_WORD', word: response.data.word })\n            })\n            .catch(error => alert(error.message));\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actioncreators from './redux/actioncreators';\n\nclass Word extends Component {\n    render() {\n        const word = this.props.word;\n        return (\n            <div className=\"word\" >\n                <div className=\"word-container\">\n                    <h3 className=\"text-success\">{word.en}</h3>\n                    <h3 className=\"text-danger\">\n                        {word.isMemorized ? '----' : word.vn}\n                    </h3>\n                </div>\n                <div className=\"btn-container\">\n                    <button\n                        onClick={() => this.props.toggleWord(word._id, !word.isMemorized)}\n                        className={word.isMemorized ? 'btn btn-success' : 'btn btn-danger'}>\n                        {word.isMemorized ? 'Forgot' : 'Memorized'}\n                    </button>\n                    <button\n                        onClick={() => this.props.removeWord(word._id)}\n                        className=\"btn btn-warning\" >\n                        Remove\n                </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(null, actioncreators)(Word);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport * as actioncreators from './redux/actioncreators';\n\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            txtEn: '',\n            txtVn: ''\n        }\n        this.addWord = this.addWord.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n    }\n    addWord() {\n        this.props.addWord(this.state.txtEn, this.state.txtVn)\n        this.setState({ txtEn: '', txtVn: '' });\n    }\n    toggleForm() {\n        this.props.toggleForm();\n    }\n    render() {\n        return (\n            <div>\n                {\n                    !this.props.shouldShowForm\n                        ?\n                        <div>\n                            <button\n                                onClick={this.toggleForm}\n                                className=\"btn btn-success\"\n                                style={{ width: 200, margin: 10, borderRadius: 10 }}>\n                                +\n                    </button>\n                        </div>\n                        :\n                        <div className=\"form-group word-from\" >\n                            <input\n                                placeholder=\"English\"\n                                className=\"form-control\"\n                                value={this.state.txtEn}\n                                onChange={evt => this.setState({ txtEn: evt.target.value })}\n                            />\n                            <br />\n                            <input\n                                placeholder=\"Vietnamese\"\n                                className=\"form-control\"\n                                value={this.state.txtVn}\n                                onChange={evt => this.setState({ txtVn: evt.target.value })} />\n                            <br />\n                            <div className=\"btn-container\">\n                                <button\n                                    onClick={this.addWord}\n                                    className=\"btn btn-success\">\n                                    Add word\n                        </button>\n                                <button\n                                    onClick={this.toggleForm}\n                                    className=\"btn btn-danger\">\n                                    Cancel\n                        </button>\n                            </div>\n                        </div>\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = function (state) {\n    return { shouldShowForm: state.shouldShowForm }\n}\nexport default connect(mapStateToProps, actioncreators)(Form);","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport * as actioncreators from './redux/actioncreators';\n\nclass Filter extends Component {\n    render() {\n        const filterMode = this.props.filterMode;\n        return (\n            <div>\n                <select\n                    className=\"word\"\n                    value={filterMode}\n                    onChange={evt => this.props.set_filter_mode(evt.target.value)}\n                >\n                    <option value=\"Show_All\">Show_All</option>\n                    <option value=\"Show_Forgot\">Show_Forgot</option>\n                    <option value=\"Show_Memorized\">Show_Memorized</option>\n                </select>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = function (state) {\n    return { filterMode: state.filterMode }\n}\nexport default connect(mapStateToProps, actioncreators)(Filter);\n","import React, { Component } from 'react';\nimport Word from './Word';\nimport Form from './Form';\nimport Filter from './Filter';\nimport { connect } from 'react-redux';\nimport * as actioncreators from './redux/actioncreators'\nclass List extends Component {\n    componentWillMount() {\n        // Neu dung tu android truy vao localhost thong qua ipv4 : http://10.0.0.105:4000/words\n        this.props.getAllWord();\n    }\n    render() {\n        return (\n            <div>\n                <Form />\n                <br />\n                <Filter />\n                {this.props.words.filter(w => {\n                    if (this.props.filterMode === 'Show_Forgot' && !w.isMemorized) return false;\n                    if (this.props.filterMode === 'Show_Memorized' && w.isMemorized) return false;\n                    return true;\n\n                }).map(word =>\n                    <Word\n                        word={word}\n                        key={word._id} />)}\n            </div>\n        )\n    }\n}\n\nconst mapStateToprops = function (state) {\n    return { words: state.words, filterMode: state.filterMode }\n}\nexport default connect(mapStateToprops, actioncreators)(List);","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { wordsReducer } from './reducer/wordReducer'\nimport { shouldShowFormReducer } from './reducer/sholuldshowformReducer'\nimport { filterModeReducer } from './reducer/filtermodeReducer';\nimport thunk from 'redux-thunk';\n\nconst reducer = combineReducers({\n    words: wordsReducer,\n    shouldShowForm: shouldShowFormReducer,\n    filterMode: filterModeReducer\n})\n\n//https://github.com/reduxjs/redux-thunk\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;","\n\n\nexport function wordsReducer(state = [], action) {\n    if (action.type === \"SET_ALL_WORDS\")\n        return action.words;\n    if (action.type === \"REMOVE_WORD\") {\n        const newWords = state.filter(w => w._id !== action._id);\n        return newWords;\n    }\n    if (action.type === 'TOGGLE_WORD') {\n        const newWords = state.map(w => {\n            if (w._id !== action._id) return w;\n            return { ...w, isMemorized: !w.isMemorized }\n        });\n        return newWords;\n    }\n    if (action.type === 'ADD_WORD') {\n        let newWords = Object.assign([], state);\n        newWords.unshift(action.word);\n        return newWords;\n    }\n    return state;\n}\n","export function shouldShowFormReducer(state = false, action) {\n    if (action.type === 'ADD_WORD') return false;\n    if (action.type === 'TOGGLE_FORM') return !state\n    return state;\n}","\nexport function filterModeReducer(state = 'Show_ALL', action) {\n    if (action.type === 'SET_FILTER_MODE') return action.filterMode\n    return state;\n}","import React, { Component } from 'react';\nimport './App.css';\n// import Box from './components/Box';\nimport List from './components/List';\nimport store from './components/redux/store';\nimport { Provider } from 'react-redux';\n\n\n\n//https://bit.ly/2Gd8oHq\n\n// 1 : Định nghĩa ra store =>\n// state :  giá trị state đưa vào store chính dữ liệu sẽ truyền qua components\n// action : \n// + tín hiệu : type (Nhìn vào tín hiệu để thay đổi store)\n// + tham số truyền vào (action.tenthuoctinh) : giá trị này sẽ được nằm trong action\n// mặc đinh phải return về state\n\n//2 : Truyền store vào trong components (sử dụng Provider)\n// 3 : Kết nối với components thông connect\n// 4 : Thay đổi store thông qua dispatch\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={store}>\n          <List />\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}